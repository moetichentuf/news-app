{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["useFetch","url","useState","data","setData","loading","setLoading","a","fetch","response","json","useEffect","fetchData","App","href","results","title","style","width","margin","src","multimedia","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iMAMMA,EAAW,SAAAC,GAAQ,IAAD,EACIC,mBAAS,MADb,mBACbC,EADa,KACPC,EADO,OAEUF,oBAAS,GAFnB,mBAEbG,EAFa,KAEJC,EAFI,iDAGpB,8BAAAC,EAAA,sEAC2BC,MAAMP,GADjC,cACUQ,EADV,gBAEuBA,EAASC,OAFhC,OAEUA,EAFV,OAGIN,EAAQM,GACRJ,GAAW,GAJf,4CAHoB,sBAcpB,OAJAK,qBAAU,YAVU,mCAWhBC,KACD,IAEI,CAACP,UAAQF,SA6BLU,MA1Bf,WACI,IADW,EAGYb,EAAS,iGAAzBK,EAHI,EAGJA,QAAQF,EAHJ,EAGIA,KAEf,OACI,6BACKE,EAAU,2CACP,4BACI,uBAAGS,KAAMX,EAAKY,QAAQ,GAAGd,KAAK,4BAAKE,EAAKY,QAAQ,GAAGC,MAArB,MAC9B,uBAAGF,KAAMX,EAAKY,QAAQ,GAAGd,KAAK,yBAAKgB,MAAO,CAAEC,MAAO,MAAOC,OAAQ,UAAYC,IAAKjB,EAAKY,QAAQ,GAAGM,WAAW,GAAGpB,OAEjH,uBAAGa,KAAMX,EAAKY,QAAQ,GAAGd,KAAK,4BAAKE,EAAKY,QAAQ,GAAGC,QACnD,uBAAGF,KAAMX,EAAKY,QAAQ,GAAGd,KAAK,yBAAKgB,MAAO,CAAEC,MAAO,MAAOC,OAAQ,UAAYC,IAAKjB,EAAKY,QAAQ,GAAGM,WAAW,GAAGpB,OAEjH,uBAAGa,KAAMX,EAAKY,QAAQ,GAAGd,KAAK,4BAAKE,EAAKY,QAAQ,GAAGC,QACnD,uBAAGF,KAAMX,EAAKY,QAAQ,GAAGd,KAAK,yBAAKgB,MAAO,CAAEC,MAAO,MAAOC,OAAQ,UAAYC,IAAKjB,EAAKY,QAAQ,GAAGM,WAAW,GAAGpB,OAEjH,uBAAGa,KAAMX,EAAKY,QAAQ,GAAGd,KAAK,4BAAKE,EAAKY,QAAQ,GAAGC,QACnD,uBAAGF,KAAMX,EAAKY,QAAQ,GAAGd,KAAK,yBAAKgB,MAAO,CAAEC,MAAO,MAAOC,OAAQ,UAAYC,IAAKjB,EAAKY,QAAQ,GAAGM,WAAW,GAAGpB,UC9BjHqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c15730ce.chunk.js","sourcesContent":["\n\n\n\nimport React, { useState, useEffect } from \"react\";\n\nconst useFetch = url => {\n    const [data, setData] = useState(null);\n    const [loading, setLoading] = useState(true);\n    async function fetchData() {\n        const response = await fetch(url);\n        const json = await response.json();\n        setData(json);\n        setLoading(false)\n    }\n\n    useEffect(() => {\n        fetchData()\n    }, []);\n\n    return {loading,data};\n};\n\nfunction App() {\n    const apiKey=process.env.REACT_APP_SECRET_KEY;\n\n    const {loading,data} = useFetch(\"https://api.nytimes.com/svc/topstories/v2/world.json?api-key=\"+ apiKey);\n\n    return (\n        <div>\n            {loading ? <div>Loading...</div> :\n                <ul>\n                    <a href={data.results[0].url}><li>{data.results[0].title} </li></a>\n                    <a href={data.results[0].url}><img style={{ width: \"25%\", margin: \"30px 0\" }} src={data.results[0].multimedia[0].url}/></a>\n\n                    <a href={data.results[1].url}><li>{data.results[1].title}</li></a>\n                    <a href={data.results[1].url}><img style={{ width: \"25%\", margin: \"30px 0\" }} src={data.results[1].multimedia[0].url}/></a>\n\n                    <a href={data.results[2].url}><li>{data.results[2].title}</li></a>\n                    <a href={data.results[2].url}><img style={{ width: \"25%\", margin: \"30px 0\" }} src={data.results[2].multimedia[0].url}/></a>\n\n                    <a href={data.results[3].url}><li>{data.results[3].title}</li></a>\n                    <a href={data.results[3].url}><img style={{ width: \"25%\", margin: \"30px 0\" }} src={data.results[3].multimedia[0].url}/></a>\n                </ul>\n            }\n        </div>\n    )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}